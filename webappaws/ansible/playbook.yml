---
- hosts: all
  become: yes
  vars:
    nodejs_version: "18"  # Specify the Node.js version you need
    app_repo: "https://github.com/Wes2000ley/wesleyatwell.com.git"
    app_dest: "/var/www/wesleyatwell.com"
    service_name: "plantsite.js"
    apache_conf_template: "templates/apache2.conf"

  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist
      when: ansible_os_family == "Debian"

    - name: Install necessary packages
      apt:
        name:
          - apache2
          - git
          - python3-pip
          - curl
        state: present

    - name: Install Node.js from NodeSource
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_{{ nodejs_version }} | bash -
        apt-get install -y nodejs
      args:
        executable: /bin/bash
      when: ansible_os_family == "Debian"

    - name: Verify Node.js installation
      command: node -v
      register: node_version

    - name: Print Node.js version
      debug:
        msg: "Installed Node.js version is {{ node_version.stdout }}"

    - name: Clone the web application repository
      git:
        repo: "{{ app_repo }}"
        dest: "{{ app_dest }}"
        version: main
        update: yes

    - name: Install Node.js dependencies
      npm:
        path: "{{ app_dest }}"
        state: present
        production: yes

    - name: Build the Node.js application (if applicable)
      command: npm run build
      args:
        chdir: "{{ app_dest }}"
      when: 
        - "'build' in lookup('file', '{{ app_dest }}/package.json')"

    - name: Create systemd service file for the application
      template:
        src: templates/service.j2
        dest: /etc/systemd/system/{{ service_name }}.service
        mode: '0644'
      notify:
        - Reload systemd
        - Start your-webapp service

    - name: Enable required Apache modules
      apache2_module:
        state: present
        name: "{{ item }}"
      loop:
        - proxy
        - proxy_http
        - rewrite
        - headers

    - name: Disable the default Apache site
      apache2_site:
        state: absent
        name: 000-default.conf
      notify:
        - Reload Apache

  handlers:
    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Start your-webapp service
      systemd:
        name: "{{ service_name }}"
        state: started
        enabled: yes

    - name: Enable Apache site
      apache2_site:
        state: enabled
        name: "{{ service_name }}.conf"

    - name: Reload Apache
      service:
        name: apache2
        state: reloaded

